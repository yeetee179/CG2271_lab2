#include <Arduino.h>
#include <avr/io.h>
#include <FreeRTOS.h>
#include <task.h>
#include <semphr.h>
#include <queue.h>

#define STACK_SIZE 200

xSemaphoreHandle semaphoreBinary = xSemaphoreCreateBinary();
xSemaphoreHandle semaphoreCounting = xSemaphoreCreateCounting( (UBaseType_t)4,(UBaseType_t)  4 );
xSemaphoreHandle semaphoreMutex = xSemaphoreCreateMutex();

int buf[4];
int in=0, out = 0;

void Producer(void *p){
	while(1){
		if(xSemaphoreTake( semaphoreBinary,(TickType_t) 0)){
			if (xSemaphoreTake( semaphoreMutex,(TickType_t) 0)){
				if(xSemaphoreTake( semaphoreMutex,(TickType_t) 0)){
					buf[in] = analogRead(0);
					in = (in + 1) % 4;
					xSemaphoreGive( semaphoreMutex);
				}
				else xSemaphoreGive( semaphoreCounting);
			}
			else {
				xSemaphoreGive(semaphoreBinary);
			}
		}
		else{
			vTaskDelay(1);
		}
	}
}

void Consumer(void *p){
	TickType_t currentTime = xTaskGetTickCount();
	while (1){
		if(xSemaphoreGive(semaphoreCounting)){
			if (xSemaphoreTake( semaphoreMutex, (TickType_t) 0)){
				Serial.println(buf[out]);
				out = (out + 1) % 4;
				xSemaphoreGive( semaphoreMutex);
			}
			else{
				xSemaphoreTake(semaphoreCounting,(TickType_t) 0);
			}
		}
		vTaskDelayUntil(&currentTime, 5000);
	}
}



void ProducerISR(){
	unsigned long current_interrupt_time = millis();
	static unsigned long previous_Interrupt_time = 0;
	if((current_interrupt_time - previous_Interrupt_time) > 200){
		xSemaphoreGiveFromISR(semaphoreBinary, NULL);
	}
	previous_Interrupt_time = current_interrupt_time;
}

void setup() {
	Serial.begin(115200);
	attachInterrupt(digitalPinToInterrupt(3), ProducerISR, FALLING);
	pinMode(0, INPUT);
	pinMode(7, OUTPUT);
	pinMode(6, OUTPUT);
}

void loop() {
	xTaskCreate(Producer, "Producer", STACK_SIZE, NULL, 1, NULL);
	xTaskCreate(Consumer, "Consumer", STACK_SIZE, NULL, 1, NULL);
	vTaskStartScheduler();
}
//
////Question 5
//
//#include <Arduino.h>
//#include <avr/io.h>
//#include <FreeRTOS.h>
//#include <task.h>
//#include <semphr.h>
//
//#define STACK_SIZE 200
//#define PIN_PTTM 0
//
//SemaphoreHandle_t binarySemaphore;
//SemaphoreHandle_t mutexSemaphore;
//SemaphoreHandle_t countingSemaphore;
//
//int buffer [4];
//int out = 0;
//int in = 0;
//
//void producer(void *p)
//{
//	while(1){
//		if(xSemaphoreTake(binarySemaphore, (TickType_t) 0)){
//			if(xSemaphoreTake(countingSemaphore, (TickType_t) 0)){
//				if(xSemaphoreTake(mutexSemaphore, (TickType_t) 0)){
//					buffer[in] = analogRead(PIN_PTTM);
//					in = (in + 1) % 4;
//					xSemaphoreGive(mutexSemaphore);
//				}
//				else{
//					xSemaphoreGive(countingSemaphore);
//				}
//			}
//			else{
//				xSemaphoreGive(binarySemaphore);
//			}
//		}
//		else{
//			vTaskDelay(1);
//		}
//	}
//}
//
//void consumer(void *p)
//{
//	TickType_t wakeTime = xTaskGetTickCount();
//	while(1){
//		if(xSemaphoreGive(countingSemaphore)){
//			if(xSemaphoreTake(mutexSemaphore, (TickType_t) 0)){
//				Serial.println(buffer[out]);
//				out = (out + 1) % 4;
//				xSemaphoreGive(mutexSemaphore);
//			}
//			else{
//				xSemaphoreTake(countingSemaphore, (TickType_t) 0);
//			}
//		}
//		vTaskDelayUntil(&wakeTime, 5000);
//	}
//}
//
//void producerISR()
//{
//	static unsigned long previousInterruptTime = 0;
//	unsigned long currentInterruptTime = millis();
//
//	if(currentInterruptTime - previousInterruptTime > 100){
//		xSemaphoreGiveFromISR(binarySemaphore, NULL);
//		previousInterruptTime = currentInterruptTime;
//	}
//}
//
//void setup() {
//	Serial.begin(115200);
//
//	attachInterrupt(1, producerISR, RISING);
//
//	binarySemaphore = xSemaphoreCreateBinary();
//	mutexSemaphore = xSemaphoreCreateMutex();
//	countingSemaphore = xSemaphoreCreateCounting((UBaseType_t) 4, (UBaseType_t) 4);
//}
//
//void loop() {
//	/* create two tasks one with higher priority than the other */
//	xTaskCreate(producer, "Producer", STACK_SIZE, NULL, 1, NULL);
//	xTaskCreate(consumer, "Consumer", STACK_SIZE, NULL, 1, NULL);
//
//	/* start scheduler */
//	vTaskStartScheduler();
//}
