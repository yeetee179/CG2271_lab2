//
//#include <Arduino.h>
//#include <avr/io.h>
//#include <FreeRTOS.h>
//#include <task.h>
//#include <semphr.h>
//
//#define STACK_SIZE 200
//
//SemaphoreHandle_t semaphoreBinary = xSemaphoreCreateBinary();
//TickType_t currentTime1;
//TickType_t currentTime2;
//TickType_t currentTime3;
//
//void myDelay(int ms) {
//	for(int i = 0; i< ms; i++){
//		delayMicroseconds(1000);
//	}
//}
//
//void task1(void *p) {
//	while(1){
//		if(xSemaphoreTake(semaphoreBinary, (TickType_t) 1) == pdTRUE){
//			unsigned int count = 0;
//			digitalWrite(9, HIGH);
//			while(count < 3000){
//				digitalWrite(6, HIGH);
//				myDelay(50);
//				digitalWrite(6, LOW);
//				myDelay(50);
//				count += 100;
//			}
////			digitalWrite(9, LOW);
////			xSemaphoreGive(semaphoreBinary);
//			xSemaphoreGive(semaphoreBinary);
//					digitalWrite(9, LOW);
//					vTaskDelayUntil(&currentTime1, 10000);
//		}
////		xSemaphoreGive(semaphoreBinary);
////		digitalWrite(9, LOW);
////		vTaskDelayUntil(&currentTime1, 10000);
//	}
//}
//
//void task2(void *p) {
//	while(1){
//		unsigned int count = 0;
//		while(count < 4000){
//			digitalWrite(7, HIGH);
//			myDelay(50);
//			digitalWrite(7, LOW);
//			myDelay(50);
//			count += 100;
//		}
//		vTaskDelayUntil(&currentTime2, 15000);
//	}
//}
//
//void task3(void *p) {
//	while(1){
//		if(xSemaphoreTake(semaphoreBinary, (TickType_t) 1) == pdTRUE){
//			unsigned int count = 0;
//			digitalWrite(9, HIGH);
//			while(count < 10000){
//				digitalWrite(8, HIGH);
//				myDelay(50);
//				digitalWrite(8, LOW);
//				myDelay(50);
//				count += 100;
//			}
////			digitalWrite(9, LOW);
////			xSemaphoreGive(semaphoreBinary);
//			xSemaphoreGive(semaphoreBinary);
//			digitalWrite(9, LOW);
//			vTaskDelayUntil(&currentTime3, 35000);
//		}
////		xSemaphoreGive(semaphoreBinary);
////		digitalWrite(9, LOW);
////		vTaskDelayUntil(&currentTime3, 35000);
//	}
//}
//
//void setup() {
//	pinMode(6, OUTPUT);
//	pinMode(7, OUTPUT);
//	pinMode(8, OUTPUT);
//	pinMode(9, OUTPUT);
//	xSemaphoreGive(semaphoreBinary);
//	currentTime1 = xTaskGetTickCount();
//	currentTime2 = xTaskGetTickCount();
//	currentTime3 = xTaskGetTickCount();
//}
//
//void loop() {
//	xTaskCreate(task1,"Task1",STACK_SIZE,NULL,3,NULL);
//	xTaskCreate(task2,"Task2",STACK_SIZE,NULL,2,NULL);
//	xTaskCreate(task3,"Task3",STACK_SIZE,NULL,1,NULL);
//	vTaskStartScheduler();
//}

#include <Arduino.h>
#include <avr/io.h>
#include <FreeRTOS.h>
#include <task.h>
#include <semphr.h>

#define STACK_SIZE 200
#define LED_PIN6      6
#define LED_PIN7 	  7
#define LED_PIN8	  8
#define LED_PIN9	  9

static TickType_t xCurrentTimeT1 = 0;	//get the current time in ticks
static TickType_t xCurrentTimeT2 = 0;
static TickType_t xCurrentTimeT3 = 0;

const TickType_t xFrequency_task1 = 10000;
const TickType_t xFrequency_task2 = 15000;
const TickType_t xFrequency_task3 = 35000;

int TASK_WCET_T1 = 3000;
int TASK_WCET_T2 = 4000;
int TASK_WCET_T3 = 10000;

SemaphoreHandle_t xSemaphore;

void myDelay(int ms) {
	for (int i = 0; i < ms; i++) {
		delayMicroseconds(1000);
	}
}

void task1(void *p) {

	for (;;) {
		if ((xSemaphoreTake(xSemaphore,1) == pdTRUE)) {
			digitalWrite(LED_PIN9, HIGH);
			int count = 0;
			while (count < TASK_WCET_T1) {
				digitalWrite(LED_PIN6, HIGH);
				myDelay(50);
				digitalWrite(LED_PIN6, LOW);
				myDelay(50);
				count += 100;
			}
			xSemaphoreGive(xSemaphore);
			digitalWrite(LED_PIN9, LOW);
			vTaskDelayUntil(&xCurrentTimeT1, xFrequency_task1);
		}
	}
}
void task2(void *p) {

	for (;;) {
		int count = 0;
		while (count < TASK_WCET_T2) {
			digitalWrite(LED_PIN7, HIGH);
			myDelay(50);
			digitalWrite(LED_PIN7, LOW);
			myDelay(50);
			count += 100;
		}
		vTaskDelayUntil(&xCurrentTimeT2, xFrequency_task2);
	}
}
void task3(void *p) {

	for (;;) {
		if ((xSemaphoreTake(xSemaphore,1) == pdTRUE)) {
			digitalWrite(LED_PIN9, HIGH);
			int count = 0;
			while (count < TASK_WCET_T3) {
				digitalWrite(LED_PIN8, HIGH);
				myDelay(50);
				digitalWrite(LED_PIN8, LOW);
				myDelay(50);
				count += 100;
			}
			xSemaphoreGive(xSemaphore);
			digitalWrite(LED_PIN9, LOW);
			vTaskDelayUntil(&xCurrentTimeT3, xFrequency_task3);
		}
	}
}
void setup() {
	xSemaphore = xSemaphoreCreateBinary();
	xSemaphoreGive(xSemaphore);
	xCurrentTimeT1 = xTaskGetTickCount();
	xCurrentTimeT2 = xTaskGetTickCount();
	xCurrentTimeT3 = xTaskGetTickCount();
	pinMode(LED_PIN6, OUTPUT);
	pinMode(LED_PIN7, OUTPUT);
	pinMode(LED_PIN8, OUTPUT);
	pinMode(LED_PIN9, OUTPUT);
}
void loop() {
	/* create two tasks one with higher priority than the other */
	xTaskCreate(task1, "Task1", STACK_SIZE, (void * ) 3, 3, NULL);
	xTaskCreate(task2, "Task2", STACK_SIZE, (void * ) 2, 2, NULL);
	xTaskCreate(task3, "Task3", STACK_SIZE, (void * ) 1, 1, NULL);
	/* start scheduler */
	vTaskStartScheduler();
}
