#include <Arduino.h>
#include <avr/io.h>
#include <FreeRTOS.h>
#include <task.h>
#include <semphr.h>
#include <queue.h>

#define STACK_SIZE 200

xSemaphoreHandle semaphoreBinary = xSemaphoreCreateBinary();
xSemaphoreHandle semaphoreCounting = xSemaphoreCreateCounting( 4, 4 );
xSemaphoreHandle semaphoreMutex = xSemaphoreCreateMutex();

int buf[4];
int in=0, out = 0;

void Producer(void *p){
	while(1){
		if(xSemaphoreTake( semaphoreBinary, ( TickType_t ) 4)){
			if (xSemaphoreTake( semaphoreMutex, 0)){
				if(xSemaphoreTake( semaphoreMutex, 0){
					buf[in] = analogRead(0);
					xSemaphoreGive( semaphoreMutex);
					Serial.println("as");
					Serial.println(buf[in] );
					in = (in + 1) % 4;
					xSemaphoreGive( semaphoreCounting);
					xSemaphoreGive( semaphoreMutex);
				}
			}
		}
		else{
			vTaskDelay(1);
		}
	}
}

void Consumer(void *p){
	int consumerValue;
	static TickType_t currentTime2 = 0;

	while (1){
		currentTime2 = xTaskGetTickCount();
		vTaskDelayUntil( &currentTime2, 400 );
		xSemaphoreTake(semaphoreCounting,0);
		xSemaphoreTake( semaphoreMutex, 0);
		if ((in + 1) %  4 !=out ){
			consumerValue = buf[out];
			out = (out + 1) % 4;
			Serial.println(consumerValue);
		}
		xSemaphoreGive(semaphoreCounting);
		xSemaphoreGive( semaphoreMutex);

	}
}

void ProducerISR(){
	unsigned long current_interrupt_time = millis();
	static unsigned long previous_Interrupt_time = 0;
	if((current_interrupt_time - previous_Interrupt_time) > 200){
		xSemaphoreGiveFromISR(semaphoreBinary, NULL);
	}
	previous_Interrupt_time = current_interrupt_time;
}

void setup() {
	Serial.begin(115200);
	attachInterrupt(digitalPinToInterrupt(3), ProducerISR, FALLING);
	pinMode(0, INPUT);
	pinMode(7, OUTPUT);
	pinMode(6, OUTPUT);
}

void loop() {
	xTaskCreate(Producer, "Producer", STACK_SIZE, NULL, 1, NULL);
	xTaskCreate(Consumer, "Consumer", STACK_SIZE, NULL, 1, NULL);
	vTaskStartScheduler();
}

