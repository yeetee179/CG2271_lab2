
#include <Arduino.h>
#include <avr/io.h>
#include <FreeRTOS.h>
#include <task.h>
#include <semphr.h>

#define STACK_SIZE 200

#define LED_PIN_1		6
#define LED_PIN_2		7
#define LED_PIN_3		8
#define LED_PIN_4		9

SemaphoreHandle_t semaphoreBinary = xSemaphoreCreateBinary();;

void myDelay(int ms) {
	for(int i = 0; i< ms; i++){
		delayMicroseconds(1000);
	}
}

void task1(void *p) {
	TickType_t currentTime = xTaskGetTickCount();
	while(1){
		if(xSemaphoreTake(semaphoreBinary, (TickType_t) 0)){
			unsigned int count = 0;
			digitalWrite(LED_PIN_4, HIGH);
			while(count < 3000){
				digitalWrite(LED_PIN_1, HIGH);
				myDelay(50);
				digitalWrite(LED_PIN_1, LOW);
				myDelay(50);
				count += 100;
			}
			digitalWrite(LED_PIN_4, LOW);
			xSemaphoreGive(semaphoreBinary);
		}
		vTaskDelayUntil(&wakeTime, 10000);
	}
}

void task2(void *p) {
	TickType_t wakeTime = xTaskGetTickCount();
	for(;;){
		unsigned int count = 0;
		while(count < 4000){
			digitalWrite(LED_PIN_2, HIGH);
			myDelay(50);
			digitalWrite(LED_PIN_2, LOW);
			myDelay(50);
			count += 100;
		}
		vTaskDelayUntil(&wakeTime, 15000);
	}
}

void task3(void *p) {
	TickType_t wakeTime = xTaskGetTickCount();
	for(;;){
		if(xSemaphoreTake(semaphoreBinary, (TickType_t) 0)){
			unsigned int count = 0;
			digitalWrite(LED_PIN_4, HIGH);
			while(count < 10000){
				digitalWrite(LED_PIN_3, HIGH);
				myDelay(50);
				digitalWrite(LED_PIN_3, LOW);
				myDelay(50);
				count += 100;
			}
			digitalWrite(LED_PIN_4, LOW);
			xSemaphoreGive(semaphoreBinary);
		}
		vTaskDelayUntil(&wakeTime, 35000);
	}
}

void setup() {
	semaphoreBinary = xSemaphoreCreateBinary();
	xSemaphoreGive(semaphoreBinary);

	pinMode(LED_PIN_1, OUTPUT);
	pinMode(LED_PIN_2, OUTPUT);
	pinMode(LED_PIN_3, OUTPUT);
	pinMode(LED_PIN_4, OUTPUT);
}

void loop() {
	/* create two tasks one with higher priority than the other */
	xTaskCreate(task1,           	// Pointer to the task entry function
				"Task1",			// Task name
				STACK_SIZE,			// Stack size
				NULL,				// Pointer that will be used as parameter
				3,					// Task priority
				NULL);				// Used to pass back a handle by which the created task can be referenced.
	xTaskCreate(task2,
				"Task2",
				STACK_SIZE,
				NULL,
				2,
				NULL);
	xTaskCreate(task3,
				"Task3",
				STACK_SIZE,
				NULL,
				1,
				NULL);

	/* start scheduler */
	vTaskStartScheduler();
}

